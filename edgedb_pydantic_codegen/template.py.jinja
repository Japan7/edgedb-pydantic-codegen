import asyncio
from enum import Enum

import orjson
from edgedb import AsyncIOExecutor
from pydantic import BaseModel, parse_raw_as

{% for import in extra_imports %}
{{import}}
{% endfor %}

EDGEQL_QUERY = """
{{query}}
"""

{% for literal in literals %}
{{literal.alias}} = Literal[
    {% for value in literal.values %}
    '{{value}}',
    {% endfor %}
]
{% endfor %}

{% for enum in enums %}
class {{enum.name}}(str, Enum):
    {%- for value in enum.members %}
    {{value}} = "{{value}}"
    {%- endfor %}
{% endfor %}

{% for model in models | reverse %}
class {{model.name}}(BaseModel):
    {% for field in model.fields -%}
    {{field.name}}:
    {%- if field.optional -%}
    {{field.type_str}} | None
    {%- else -%}
    {{field.type_str}}
    {%- endif %}
    {% endfor %}
{% endfor %}

async def {{stem}} (
    executor: AsyncIOExecutor,
    {% if args | length > 0  %}
    *,
    {% for arg in args %}
    {{arg.name}}:
    {%- if arg.optional -%}
    {{arg.type_str}} | None = None
    {%- else -%}
    {{arg.type_str}}
    {%- endif -%}
    ,
    {% endfor %}
    {% endif %}
) ->
{%- if return_cardinality == 'NO_RESULT' -%}
None
{%- elif return_cardinality == 'AT_MOST_ONE' -%}
{{return_model.name}} | None
{%- elif return_cardinality == 'ONE' -%}
{{return_model.name}}
{%- elif return_cardinality == 'MANY' -%}
list[{{return_model.name}}] {# | None #}
{%- elif return_cardinality == 'AT_LEAST_ONE' -%}
list[{{return_model.name}}]
{%- endif -%}:
    resp = await executor.query_
    {%- if (return_cardinality == 'NO_RESULT') or (return_cardinality == 'AT_MOST_ONE') or (return_cardinality == 'ONE') -%}
    single_
    {%- endif -%}
    json(EDGEQL_QUERY,
        {% for arg in args %}
        {% if arg.is_json %}
        {{arg.name}} = orjson.dumps({{arg.name}}).decode(),
        {% else %}
        {{arg.name}} = {{arg.name}},
        {% endif %}
        {% endfor %}
    )
    {%- if return_cardinality == 'NO_RESULT' %}
    assert resp == 'null'
    {% elif return_cardinality == 'AT_MOST_ONE' %}
    return await asyncio.to_thread(parse_raw_as, {{return_model.name}} | None, resp, json_loads=orjson.loads)
    {% elif return_cardinality == 'ONE' %}
    return await asyncio.to_thread(parse_raw_as, {{return_model.name}}, resp, json_loads=orjson.loads)
    {% elif return_cardinality == 'MANY' %}
    return await asyncio.to_thread(parse_raw_as, list[{{return_model.name}}], resp, json_loads=orjson.loads)
    {% elif return_cardinality == 'AT_LEAST_ONE' %}
    return await asyncio.to_thread(parse_raw_as, list[{{return_model.name}}], resp, json_loads=orjson.loads)
    {% endif %}
