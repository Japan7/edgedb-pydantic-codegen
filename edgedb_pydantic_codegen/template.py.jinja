import orjson
from edgedb import AsyncIOExecutor
from pydantic import BaseModel, Field, TypeAdapter

from uuid import UUID
from decimal import Decimal
from datetime import datetime
from datetime import timedelta
from datetime import date
from datetime import time
from typing import Any

from typing import Literal
from enum import StrEnum

EDGEQL_QUERY = r"""
{{query}}
"""

{% for literal in literals %}
{{literal.alias}} = Literal[
    {% for value in literal.values %}
    "{{value}}",
    {% endfor %}
]
{% endfor %}

{% for enum in enums %}
class {{enum.name}}(StrEnum):
    {%- for value in enum.members %}
    {{value}} = "{{value}}"
    {%- endfor %}
{% endfor %}

{% for model in models | reverse %}
class {{model.name}}(BaseModel):
    {% for field in model.fields -%}
    {{field.name}}:
    {%- if field.optional -%}
    {{field.type_str}} | None
    {%- else -%}
    {{field.type_str}}
    {%- endif %}
    {%- if field.alias -%}
    = Field(alias="{{field.alias}}")
    {%- endif %}
    {% endfor %}
{% endfor %}

{%- if return_type != 'None' %}
adapter = TypeAdapter({{return_type}})
{% endif %}

async def {{stem}} (
    executor: AsyncIOExecutor,
    {% if args | length > 0  %}
    *,
    {% for arg in args %}
    {{arg.name}}:
    {%- if arg.optional -%}
    {{arg.type_str}} | None = None
    {%- else -%}
    {{arg.type_str}}
    {%- endif -%}
    ,
    {% endfor %}
    {% endif %}
) -> {{return_type}}:
    resp = await executor.query_
    {%- if return_single -%}
    single_
    {%- endif -%}
    json(EDGEQL_QUERY,
        {% for arg in args %}
        {% if arg.is_json %}
        {{arg.name}} = orjson.dumps({{arg.name}}).decode(),
        {% else %}
        {{arg.name}} = {{arg.name}},
        {% endif %}
        {% endfor %}
    )
    {%- if return_type == 'None' %}
    assert resp == "null"
    {% else %}
    return adapter.validate_json(resp, strict=False)
    {% endif %}
