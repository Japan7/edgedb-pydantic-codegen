import asyncio
from typing import cast

import orjson
from edgedb import AsyncIOExecutor
from pydantic import BaseModel, Field, parse_raw_as

from uuid import UUID
from decimal import Decimal
from datetime import datetime
from datetime import timedelta
from datetime import date
from datetime import time
from typing import Any

from typing import Literal
from enum import Enum

from pydantic import validator
from base64 import b64decode

EDGEQL_QUERY = r"""
{{query}}
"""

{% for literal in literals %}
{{literal.alias}} = Literal[
    {% for value in literal.values %}
    "{{value}}",
    {% endfor %}
]
{% endfor %}

{% for enum in enums %}
class {{enum.name}}(str, Enum):
    {%- for value in enum.members %}
    {{value}} = "{{value}}"
    {%- endfor %}
{% endfor %}

{% for model in models | reverse %}
class {{model.name}}(BaseModel):
    {% for field in model.fields -%}
    {{field.name}}:
    {%- if field.optional -%}
    {{field.type_str}} | None
    {%- else -%}
    {{field.type_str}}
    {%- endif %}
    {%- if field.alias -%}
    = Field(alias="{{field.alias}}")
    {%- endif %}
    {% endfor %}
{% endfor %}

async def {{stem}} (
    executor: AsyncIOExecutor,
    {% if args | length > 0  %}
    *,
    {% for arg in args %}
    {{arg.name}}:
    {%- if arg.optional -%}
    {{arg.type_str}} | None = None
    {%- else -%}
    {{arg.type_str}}
    {%- endif -%}
    ,
    {% endfor %}
    {% endif %}
) -> {{return_type}}:
    resp = await executor.query_
    {%- if return_single -%}
    single_
    {%- endif -%}
    json(EDGEQL_QUERY,
        {% for arg in args %}
        {% if arg.is_json %}
        {{arg.name}} = orjson.dumps({{arg.name}}).decode(),
        {% else %}
        {{arg.name}} = {{arg.name}},
        {% endif %}
        {% endfor %}
    )
    {%- if return_type == 'None' %}
    assert resp == "null"
    {% else %}
    parsed = await asyncio.to_thread(parse_raw_as, {{return_type}}, resp, json_loads=orjson.loads)
    return cast({{return_type}}, parsed)
    {% endif %}
